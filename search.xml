<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++的一些常用代码示例</title>
      <link href="/2019/03/08/cpp/"/>
      <url>/2019/03/08/cpp/</url>
      
        <content type="html"><![CDATA[<h1 id="C-的一些常用代码示例"><a href="#C-的一些常用代码示例" class="headerlink" title="C++的一些常用代码示例"></a>C++的一些常用代码示例</h1><p>这篇文章只是为了记住一些代码格式，纯属为了记忆和备考。</p><h2 id="STL-总结"><a href="#STL-总结" class="headerlink" title="STL 总结"></a>STL 总结</h2><p>Standard Template Library</p><h3 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h3><ul><li><a href="#vector">vector</a></li><li>list</li><li>queue</li><li>deque</li><li>stack</li><li>set</li><li>pair</li><li>map</li><li>unordered_map</li><li>unordered_set</li><li>bitset</li></ul><h3 id="Algorithms-algorithm"><a href="#Algorithms-algorithm" class="headerlink" title="Algorithms (algorithm)"></a>Algorithms (algorithm)</h3><ul><li>min / max</li><li><a href="#sort">sort</a> / stable_sort / partial_sort</li><li>lower_bound / upper_bound</li><li>replace / remove / reverse</li><li>find_if / count / search</li><li>make_heap / push_heap</li></ul><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  </span><span class="token comment" spellcheck="true">// sort</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  </span><span class="token comment" spellcheck="true">// greater</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> LEN<span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> LEN<span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// or begin(arr), end(arr)</span><span class="token punctuation">}</span></code></pre><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// init n by m matrix with 0</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">arr1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr1<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// insert 3 at front</span>    vec<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// inserts 4 two times at front</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码的一些细节</title>
      <link href="/2019/03/08/java/"/>
      <url>/2019/03/08/java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java代码的一些细节"><a href="#Java代码的一些细节" class="headerlink" title="Java代码的一些细节"></a>Java代码的一些细节</h1><h2 id="for的执行顺序"><a href="#for的执行顺序" class="headerlink" title="for的执行顺序"></a>for的执行顺序</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>A<span class="token punctuation">;</span> B<span class="token punctuation">;</span> C<span class="token punctuation">)</span> <span class="token punctuation">{</span>    D<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// A B D C B D C B... (end with B if there is an end)</span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>Java 的 Exceptions 和 Errors 等类的继承关系  </p><p><img src="./images/exception.jpg" alt="Exception and Errors"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种常用算法</title>
      <link href="/2019/03/08/algorithms/"/>
      <url>/2019/03/08/algorithms/</url>
      
        <content type="html"><![CDATA[<h1 id="几种常用算法"><a href="#几种常用算法" class="headerlink" title="几种常用算法"></a>几种常用算法</h1><h2 id="Binary-Serach"><a href="#Binary-Serach" class="headerlink" title="Binary Serach"></a>Binary Serach</h2><p>while小于等于<br>先判断左右，否则返回中</p><h2 id="Combinational-Number"><a href="#Combinational-Number" class="headerlink" title="Combinational Number"></a>Combinational Number</h2><p>C(n,m) = C(n-1,m-1) + C(n-1,m)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 生成组合数表</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">>></span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">>></span> <span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h2><h3 id="Selection-sort"><a href="#Selection-sort" class="headerlink" title="Selection sort"></a>Selection sort</h3><ul><li>时间复杂度O(n^2)，不要使用</li></ul><h3 id="Bubble-sort"><a href="#Bubble-sort" class="headerlink" title="Bubble sort"></a>Bubble sort</h3><ul><li>比插排慢，不要使用</li></ul><h3 id="Insertion-sort"><a href="#Insertion-sort" class="headerlink" title="Insertion sort"></a>Insertion sort</h3><ul><li>越接近结果，速度越快  </li><li>只适合小范围的排序  </li><li>时间复杂度O(n^2)  </li><li>空间复杂度O(1)</li><li>稳定</li></ul><h3 id="Heap-sort"><a href="#Heap-sort" class="headerlink" title="Heap sort"></a>Heap sort</h3><ul><li>适合内存小的环境，中小范围排序  </li><li>时间复杂度O(nlogn)  </li><li>空间复杂度O(1)  </li><li>不稳定</li></ul><h3 id="Quick-sort"><a href="#Quick-sort" class="headerlink" title="Quick sort"></a>Quick sort</h3><ul><li>比O(nlogn)要快，被用于java原始类型数组排序和C的qsort</li><li>最坏情况O(n^2)  </li><li>空间复杂度O(logn)</li><li>不稳定</li></ul><h3 id="Merge-sort"><a href="#Merge-sort" class="headerlink" title="Merge sort"></a>Merge sort</h3><ul><li>适用于数据被除主内存以外的地方获取</li><li>时间复杂度O(nlogn)</li><li>有很好的变种(Tim sort)</li><li>空间复杂度O(n)</li><li>比较难实现</li><li>稳定</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的基本概念和算法</title>
      <link href="/2019/03/08/tree/"/>
      <url>/2019/03/08/tree/</url>
      
        <content type="html"><![CDATA[<h1 id="树的基本概念和算法"><a href="#树的基本概念和算法" class="headerlink" title="树的基本概念和算法"></a>树的基本概念和算法</h1><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>自平衡二叉<strong>搜索</strong>树（Self-balancing binary search tree）又被称为<strong>AVL树</strong>（有别于AVL算法）</p><ul><li>它是一棵空树或它的左右两个子树的高度差的绝对值不超过1</li><li>左右两个子树都是一棵平衡二叉树</li><li>平衡二叉树的常用实现方法有<a href="#红黑树">红黑树</a>、AVL、替罪羊树、Treap、伸展树等</li><li>最小二叉平衡树的节点总数的公式如下 F(n)=F(n-1)+F(n-2)+1（Fibonacci数列），1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。</li><li>h = O(logn)</li></ul><h3 id="AVL树旋转"><a href="#AVL树旋转" class="headerlink" title="AVL树旋转"></a>AVL树旋转</h3><pre><code>     y                               x    / \     Right Rotation          /  \   x   T3   - - - - - - - &gt;        T1   y  / \       &lt; - - - - - - -            / \ T1  T2     Left Rotation            T2  T3         z                                      y        / \                                   /   \       y   T4      Right Rotate (z)          x      z      / \          - - - - - - - - -&gt;      /  \    /  \     x   T3                               T1  T2  T3  T4    / \  T1   T2     z                               z                           x    / \                            /   \                        /  \   y   T4  Left Rotate (y)        x    T4  Right Rotate(z)    y      z  / \      - - - - - - - - -&gt;    /  \      - - - - - - - -&gt;  / \    / \T1   x                          y    T3                    T1  T2 T3  T4    / \                        / \  T2   T3                    T1   T2  z                                y /  \                            /   \T1   y     Left Rotate(z)       z      x    /  \   - - - - - - - -&gt;    / \    / \   T2   x                     T1  T2 T3  T4       / \     T3  T4   z                            z                            x  / \                          / \                          /  \T1   y   Right Rotate (y)    T1   x      Left Rotate(z)   z      y    / \  - - - - - - - - -&gt;     /  \   - - - - - - - -&gt;  / \    / \   x   T4                      T2   y                  T1  T2  T3  T4  / \                              /  \T2   T3                           T3   T4</code></pre><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>插在叶节点，根据情况旋转（最多一次）。</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>目标节点无子节点，直接删。有一个子节点，删除后子节点顶替。有两个子节点，删除后用右子节点的最左叶节点顶替。最后根据情况旋转（可能两次）。</p><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><ul><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点必须有<strong>两个</strong>黑色的子节点。</li><li>从任一节点到其每个叶子的所有简单路径都包含<strong>相同数目</strong>的黑色节点。</li></ul><h4 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h4><p>在插入和删除上比AVL树快，但AVL树更适用于搜索。</p><h4 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insert_case</span><span class="token punctuation">(</span>node <span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>parent <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 根节点</span>        n<span class="token operator">-></span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>parent<span class="token operator">-></span>color <span class="token operator">==</span> BLACK<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 父节点为黑</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">uncle</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token function">uncle</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>color <span class="token operator">==</span> RED<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 叔父节点为红</span>        n<span class="token operator">-></span>parent<span class="token operator">-></span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>        <span class="token function">uncle</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>        <span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token function">insert_case</span><span class="token punctuation">(</span><span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 父节点为红或叔父节点为黑</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> n<span class="token operator">-></span>parent<span class="token operator">-></span>right <span class="token operator">&amp;&amp;</span> n<span class="token operator">-></span>parent <span class="token operator">==</span> <span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前为右节点且父节点为左节点</span>            <span class="token function">rotate_left</span><span class="token punctuation">(</span>n<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> n<span class="token operator">-></span>parent<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> n<span class="token operator">-></span>parent <span class="token operator">==</span> <span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前为左节点且父节点为右节点</span>            <span class="token function">rotate_right</span><span class="token punctuation">(</span>n<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        n<span class="token operator">-></span>parent<span class="token operator">-></span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>        <span class="token function">grandparent</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> n<span class="token operator">-></span>parent<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> n<span class="token operator">-></span>parent <span class="token operator">==</span> <span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前节点和父节点都为左节点</span>            <span class="token function">rotate_right</span><span class="token punctuation">(</span><span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当前节点和父节点都为右节点</span>            <span class="token function">rotate_left</span><span class="token punctuation">(</span><span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><ul><li>若设二叉树的深度为h，1到h-1层的结点数都是满的，第h层所有的结点都连续集中在最左边。</li><li>度为1的节点数为0或1</li><li>叶子节点数为n/2或(n+1)/2</li><li>转化为森林的个数为h或h-1</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash shell的一些常用技巧</title>
      <link href="/2019/03/07/bash-shell/"/>
      <url>/2019/03/07/bash-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Bash-shell的一些常用技巧"><a href="#Bash-shell的一些常用技巧" class="headerlink" title="Bash shell的一些常用技巧"></a>Bash shell的一些常用技巧</h1><p>最近在学操作系统，对linux也开始逐渐混熟了。踩坑无数，多少次重装系统，码农不易，我们学生也很艰辛啊。先推荐一下操作系统的圣经《Operating System Concept》这本书，官网给的ppt很不错，讲的很细很精炼 <del>（感觉比自己老师的ppt好得多）</del>。</p><p>第一次作业写的是遍历文件夹及子目录内的所有文件并且将output写入到输出文件内。看似简单，实则不然，需要注意很多特殊问题，这里就总结一下学到的东西吧。</p><h2 id="Array-数组与队列"><a href="#Array-数组与队列" class="headerlink" title="Array 数组与队列"></a><strong>Array 数组与队列</strong></h2><p>我们作业的要求是横向遍历当前文件夹，所以肯定是用到BFS，最方便的方法就是队列queue了。bash没有直接的方法调用队列，但是数组其实就可以实现所有的数据结构，只不过复杂度不同。</p><h3 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># create indexed array</span><span class="token keyword">declare</span> -a array  <span class="token comment" spellcheck="true"># or</span>array<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># create associative array</span><span class="token keyword">declare</span> -A array_ass</code></pre><p>这里关联数组其实就是hash table，可以用字符串作为下标，键值唯一。</p><h3 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h3><pre class=" language-bash"><code class="language-bash">array<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"element"</span>array_ass<span class="token punctuation">[</span>keystring<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"value"</span></code></pre><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># the size of array</span>size<span class="token operator">=</span><span class="token variable">${#array[@]}</span><span class="token comment" spellcheck="true"># traverse</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"<span class="token variable">${array[@]}</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">echo</span> element: <span class="token variable">$i</span><span class="token keyword">done</span><span class="token comment" spellcheck="true"># or</span><span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token string">"<span class="token variable">${!array[@]}</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">echo</span> element: <span class="token string">"<span class="token variable">${array[i]}</span>"</span><span class="token keyword">done</span></code></pre><h3 id="数组增减"><a href="#数组增减" class="headerlink" title="数组增减"></a>数组增减</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># append</span>array+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>array_ass+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span>foo<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># delete</span>unset array<span class="token punctuation">[</span>0<span class="token punctuation">]</span>unset array_ass<span class="token punctuation">[</span>keystring<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># or</span>array<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">${array[@]/hello}</span>"</span><span class="token punctuation">)</span>array_ass<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">${array_ass[@]/bar}</span>"</span><span class="token punctuation">)</span></code></pre><p>使用反斜杠“\”的话算是特殊用法了，如果知道了索引和键值还是用unset吧。  </p><h3 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a><strong>字符串数组</strong></h3><pre class=" language-bash"><code class="language-bash">string<span class="token operator">=</span><span class="token string">"hello world"</span>arr1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span>arr2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$string</span>"</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token variable">${arr1[0]}</span> <span class="token variable">${arr2[0]}</span><span class="token comment" spellcheck="true"># hello hello world</span></code></pre><p>相信只要是写过shell的都明白这个坑了。</p><h3 id="队列实现"><a href="#队列实现" class="headerlink" title="队列实现"></a>队列实现</h3><p>实现queue的话很简单，append已经有了，无非就是pop要写一下。</p><pre class=" language-bash"><code class="language-bash">queue<span class="token operator">=</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>first<span class="token operator">=</span><span class="token variable">${queue[0]}</span>  <span class="token comment" spellcheck="true"># peek</span>queue<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">${queue[@]:1}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#pop</span></code></pre><h2 id="Redirection-重定向"><a href="#Redirection-重定向" class="headerlink" title="Redirection 重定向"></a>Redirection 重定向</h2><p>对输入输出进行重定向的话也有一些tricks可以学习。</p><h3 id="根据路径创建文件"><a href="#根据路径创建文件" class="headerlink" title="根据路径创建文件"></a>根据路径创建文件</h3><p>这是作业里的一个大坑之一，需要根据路径将output内容写到输出文件里面。要注意要先创建附目录、参数是否是绝对路径和路径里的空格。</p><pre class=" language-bash"><code class="language-bash">output<span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span><span class="token comment" spellcheck="true"># get output parent directory path</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$output</span>"</span> <span class="token operator">=</span> <span class="token string">"/*"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    tmp<span class="token operator">=</span><span class="token variable">${output// /\\ }</span><span class="token keyword">else</span>    tmp<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/<span class="token variable">${output// /\\ }</span>    output<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/<span class="token variable">$output</span>"</span>  <span class="token comment" spellcheck="true"># ensure it is the absolute path</span><span class="token keyword">fi</span>output_dir<span class="token operator">=</span><span class="token string">"`dirname "</span><span class="token variable">$tmp</span><span class="token string">"`"</span><span class="token comment" spellcheck="true"># create parent directories</span><span class="token function">mkdir</span> -p <span class="token string">"<span class="token variable">${output_dir//\\ / }</span>"</span>  <span class="token comment" spellcheck="true"># create or clear file</span><span class="token operator">></span> <span class="token string">"<span class="token variable">$output</span>"</span>  <span class="token comment" spellcheck="true"># no input here</span></code></pre><p>这里想说的其实就是初始化文件只需要一个 &gt; 就够了</p><h3 id="使用mapfile和process-substitution存储结果"><a href="#使用mapfile和process-substitution存储结果" class="headerlink" title="使用mapfile和process substitution存储结果"></a>使用mapfile和process substitution存储结果</h3><p>mapfile是bash的内部命令，读取标准输入到索引数组。<br>process substitution 进程替换，返回一个文件描述符号，可以像一个文件名一样被使用。<br>组合使用的话就不需要管道 “|”，而且可以完美的保留多个命令所输出的字符串，不用担心空格影响数组。</p><pre class=" language-bash"><code class="language-bash">mapfile -t output_arr <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>echo <span class="token string">"hello world"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"[hello world]"</span><span class="token punctuation">)</span></code></pre><p>当然也可以这样直接加引号：</p><pre class=" language-bash"><code class="language-bash">output_arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"$(echo "</span>hello world<span class="token string">")"</span> <span class="token string">"$(echo "</span><span class="token punctuation">[</span>hello world<span class="token punctuation">]</span><span class="token string">")"</span><span class="token punctuation">)</span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h2><p>这篇文章主要是讲技巧，至于其他的注意事项这里只简要提一下吧。</p><ul><li>字符串变量一定要加引号</li><li>有些地方一定要空格，比如expr，[ 条件 ]；有些一定不要空格，比如=赋值，&lt;( 命令 )</li><li>方法局部变量记得加个local</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
