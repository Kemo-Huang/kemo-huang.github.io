<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于Bash shell的一些常用技巧</title>
      <link href="/2019/03/07/bash-shell/"/>
      <url>/2019/03/07/bash-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="关于Bash-shell的一些常用技巧"><a href="#关于Bash-shell的一些常用技巧" class="headerlink" title="关于Bash shell的一些常用技巧"></a>关于Bash shell的一些常用技巧</h1><p>最近在学操作系统，对linux也开始逐渐混熟了。踩坑无数，多少次重装系统，码农不易，我们学生也很艰辛啊。先推荐一下操作系统的圣经《Operating System Concept》这本书，官网给的ppt很不错，讲的很细很精炼 <del>（感觉比自己老师的ppt好得多）</del>。</p><p>第一次作业写的是遍历文件夹及子目录内的所有文件并且将output写入到输出文件内。看似简单，实则不然，需要注意很多特殊问题，这里就总结一下学到的东西吧。</p><h2 id="Array-数组与队列"><a href="#Array-数组与队列" class="headerlink" title="Array 数组与队列"></a><strong>Array 数组与队列</strong></h2><p>我们作业的要求是横向遍历当前文件夹，所以肯定是用到BFS，最方便的方法就是队列queue了。bash没有直接的方法调用队列，但是数组其实就可以实现所有的数据结构，只不过复杂度不同。</p><h3 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># create indexed array</span><span class="token keyword">declare</span> -a array  <span class="token comment" spellcheck="true"># or</span>array<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># create associative array</span><span class="token keyword">declare</span> -A array_ass</code></pre><p>这里关联数组其实就是hash table，可以用字符串作为下标，键值唯一。</p><h3 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h3><pre class=" language-bash"><code class="language-bash">array<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"element"</span>array_ass<span class="token punctuation">[</span>keystring<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"value"</span></code></pre><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># the size of array</span>size<span class="token operator">=</span><span class="token variable">${#array[@]}</span><span class="token comment" spellcheck="true"># traverse</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"<span class="token variable">${array[@]}</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">echo</span> element: <span class="token variable">$i</span><span class="token keyword">done</span><span class="token comment" spellcheck="true"># or</span><span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token string">"<span class="token variable">${!array[@]}</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">echo</span> element: <span class="token string">"<span class="token variable">${array[i]}</span>"</span><span class="token keyword">done</span></code></pre><h3 id="数组增减"><a href="#数组增减" class="headerlink" title="数组增减"></a>数组增减</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># append</span>array+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>array_ass+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span>foo<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># delete</span>unset array<span class="token punctuation">[</span>0<span class="token punctuation">]</span>unset array_ass<span class="token punctuation">[</span>keystring<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># or</span>array<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">${array[@]/hello}</span>"</span><span class="token punctuation">)</span>array_ass<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">${array_ass[@]/bar}</span>"</span><span class="token punctuation">)</span></code></pre><p>使用反斜杠“\”的话算是特殊用法了，如果知道了索引和键值还是用unset吧。  </p><h3 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a><strong>字符串数组</strong></h3><pre class=" language-bash"><code class="language-bash">string<span class="token operator">=</span><span class="token string">"hello world"</span>arr1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span>arr2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$string</span>"</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token variable">${arr1[0]}</span> <span class="token variable">${arr2[0]}</span><span class="token comment" spellcheck="true"># hello hello world</span></code></pre><p>相信只要是写过shell的都明白这个坑了。</p><h3 id="队列实现"><a href="#队列实现" class="headerlink" title="队列实现"></a>队列实现</h3><p>实现queue的话很简单，append已经有了，无非就是pop要写一下。</p><pre class=" language-bash"><code class="language-bash">queue<span class="token operator">=</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>first<span class="token operator">=</span><span class="token variable">${queue[0]}</span>  <span class="token comment" spellcheck="true"># peek</span>queue<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">${queue[@]:1}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#pop</span></code></pre><h2 id="Redirection-重定向"><a href="#Redirection-重定向" class="headerlink" title="Redirection 重定向"></a>Redirection 重定向</h2><p>对输入输出进行重定向的话也有一些tricks可以学习。</p><h3 id="根据路径创建文件"><a href="#根据路径创建文件" class="headerlink" title="根据路径创建文件"></a>根据路径创建文件</h3><p>这是作业里的一个大坑之一，需要根据路径将output内容写到输出文件里面。要注意要先创建附目录、参数是否是绝对路径和路径里的空格。</p><pre class=" language-bash"><code class="language-bash">output<span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span><span class="token comment" spellcheck="true"># get output parent directory path</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$output</span>"</span> <span class="token operator">=</span> <span class="token string">"/*"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    tmp<span class="token operator">=</span><span class="token variable">${output// /\\ }</span><span class="token keyword">else</span>    tmp<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/<span class="token variable">${output// /\\ }</span>    output<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/<span class="token variable">$output</span>"</span>  <span class="token comment" spellcheck="true"># ensure it is the absolute path</span><span class="token keyword">fi</span>output_dir<span class="token operator">=</span><span class="token string">"`dirname "</span><span class="token variable">$tmp</span><span class="token string">"`"</span><span class="token comment" spellcheck="true"># create parent directories</span><span class="token function">mkdir</span> -p <span class="token string">"<span class="token variable">${output_dir//\\ / }</span>"</span>  <span class="token comment" spellcheck="true"># create or clear file</span><span class="token operator">></span> <span class="token string">"<span class="token variable">$output</span>"</span>  <span class="token comment" spellcheck="true"># no input here</span></code></pre><p>这里想说的其实就是初始化文件只需要一个 &gt; 就够了</p><h3 id="使用mapfile和process-substitution存储结果"><a href="#使用mapfile和process-substitution存储结果" class="headerlink" title="使用mapfile和process substitution存储结果"></a>使用mapfile和process substitution存储结果</h3><p>mapfile是bash的内部命令，读取标准输入到索引数组。<br>process substitution 进程替换，返回一个文件描述符号，可以像一个文件名一样被使用。<br>组合使用的话就不需要管道 “|”，而且可以完美的保留多个命令所输出的字符串，不用担心空格影响数组。</p><pre class=" language-bash"><code class="language-bash">mapfile -t output_arr <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>echo <span class="token string">"hello world"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"[hello world]"</span><span class="token punctuation">)</span></code></pre><p>当然也可以这样直接加引号：</p><pre class=" language-bash"><code class="language-bash">output_arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"$(echo "</span>hello world<span class="token string">")"</span> <span class="token string">"$(echo "</span><span class="token punctuation">[</span>hello world<span class="token punctuation">]</span><span class="token string">")"</span><span class="token punctuation">)</span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h2><p>这篇文章主要是讲技巧，至于其他的注意事项这里只简要提一下吧。</p><ul><li>字符串变量一定要加引号</li><li>有些地方一定要空格，比如expr，[ 条件 ]；有些一定不要空格，比如=赋值，&lt;( 命令 )</li><li>方法局部变量记得加个local</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
