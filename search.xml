<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件工程的基本知识</title>
      <link href="/2019/06/05/softwareengineering/"/>
      <url>/2019/06/05/softwareengineering/</url>
      
        <content type="html"><![CDATA[<h1 id="软件工程的基本知识"><a href="#软件工程的基本知识" class="headerlink" title="软件工程的基本知识"></a>软件工程的基本知识</h1><p>软件工程本身不难，但是在理论上的知识点还是又多又复杂，作为学生，在此整理一下知识点。</p><h2 id="软件配置管理"><a href="#软件配置管理" class="headerlink" title="软件配置管理"></a>软件配置管理</h2><p><strong>Software Configuration Management (SCM)</strong></p><h4 id="Change-control"><a href="#Change-control" class="headerlink" title="Change control"></a>Change control</h4><ul><li>Change request<ul><li>new features</li><li>bug report</li></ul></li><li>Change control authority</li><li>link code changes to change requests</li></ul><p><strong>Bugzilla</strong></p><p>A database for bugs. </p><h4 id="Version-control"><a href="#Version-control" class="headerlink" title="Version control"></a>Version control</h4><p>A <strong>Version Control System</strong> (VCS) is a software system that keeps track of the changes made to a set of files so that you can recall a specific version. </p><p>Apache <strong>Subversion</strong> (SVN)</p><ul><li>svn checkout</li><li>git checkout</li><li>svn commit -m “msg”</li><li>git commit -m “msg”</li><li>svn up</li><li>git pull upstream master</li><li>svn add</li><li>git add</li></ul><p><strong>Git</strong></p><p>File status life cycle: untracked, unmodified, modified, staged</p><p><strong>Github</strong></p><p>Pull request: lets you tell others about the changes you’ve pushed to a Github repository.</p><p><strong>Merging</strong> can be bad because sometimes it produces errors.</p><p>Golden rule: Check in quickly. Break work into small steps.</p><h4 id="Build-management"><a href="#Build-management" class="headerlink" title="Build management"></a>Build management</h4><p><strong>Automatic</strong> building</p><p><strong>Test</strong> build procedure</p><p><strong>Tools</strong></p><ul><li>make</li><li>ant</li><li>mvn</li><li>gradle</li></ul><p>Daily build and smoke test</p><h4 id="Releasing"><a href="#Releasing" class="headerlink" title="Releasing"></a>Releasing</h4><p>Maven central and Nexus.</p><p>Alpha/beta release</p><p>Final release</p><p>Bug free.</p><h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><ul><li>Code</li><li>Test suites</li><li>Manuals</li><li>Requirements</li><li>Specifications</li><li>Design Document</li><li>Schedules</li></ul><p><strong>SCM tool</strong> for keeping track of the product.</p><p><strong>Change request:</strong> change control + version control</p><p><strong>Branches</strong></p><ul><li>short-lived</li><li>fixing bugs</li><li>experiment</li><li>political fights</li></ul><p><strong>Discipline</strong></p><p>Software configuration item.</p><ul><li>Identification<ul><li>versions</li><li>baseline</li><li>release</li></ul></li><li>Control</li><li>Status accounting</li><li>Audit and review</li></ul><p><strong>Role</strong></p><ul><li>Software engineer</li><li>Software engineer in Test</li><li>Technical Project Manager</li></ul><h2 id="软件开发模式"><a href="#软件开发模式" class="headerlink" title="软件开发模式"></a>软件开发模式</h2><ul><li>plan-driven vs agile</li><li>centralized vs distributed</li><li>high math vs low math</li><li>close vs little customer interaction</li><li>much testing vs little testing</li><li>organize by architecture vs features</li></ul><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><ul><li>Requirement</li><li>Design</li><li>Implementation</li><li>Integration</li><li>Testing</li><li>Maintenance</li></ul><p>Verification = Integration + Testing</p><p><img src="images\waterfall.png" alt></p><h3 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h3><p><strong>XP</strong>: eXtreme Programming</p><p><strong>Main ideas:</strong></p><ul><li><p><strong>No much documentation</strong>. Focus on working code and tests.</p></li><li><p>Implement <strong>features one by one.</strong></p></li><li>Release code <strong>frequently.</strong></li><li>Work closely with <strong>customers.</strong></li><li>Communicate a lot with <strong>team members.</strong></li></ul><p><strong>Iteration:</strong> 1-3 weeks</p><p><strong>User stories</strong></p><ul><li>wanted features by customer</li><li>a path through the system</li><li><strong>written by customers</strong></li><li>written on index cards</li><li>format:<ul><li><strong>title</strong></li><li><strong>acceptance test</strong></li><li><strong>priority</strong></li><li><strong>story point</strong>: unit of measure for expressing the overall size of a user story, feature, or other piece of work. The raw value of a story point is unimportant. What matters are the relative values. </li><li><strong>description</strong></li></ul></li><li>ideal time: only thing, no interruption</li><li>elapsed time: total time</li><li>velocity: rate of progress, sum of story</li><li>prioritization</li></ul><p><strong>Plan</strong> each iteration in an <strong>iteration meeting</strong>.</p><ul><li>planning poker: <ul><li>Fibonacci sequence</li><li>estimate story, re-estimate, until converge</li></ul></li><li>programmers: <strong>one iteration</strong> at a time</li><li>customers: many iterations</li></ul><p><strong>One-day</strong> tasks.</p><p><strong>Pair programming</strong></p><ul><li><p>Roles</p><ul><li><strong>Driver</strong>: coding</li><li><strong>Navigator</strong>: observer</li><li>Switch roles every 30 min or less</li></ul></li><li><p>Benefits</p><ul><li>Higher product quality</li><li>Improved cycle time</li><li>Increased programmer satisfaction</li><li>Enhanced learning</li><li>Ease staff training and transition</li><li>Knowledge management / Reduced product risk</li><li>Enhanced team building</li></ul></li></ul><p><strong>Practices</strong></p><ul><li><strong>Planning game</strong> for requirements</li><li><strong>Test driven development</strong> for design and testing</li><li><strong>Refactoring</strong> for design</li><li><strong>Pair programming</strong> for development</li><li><strong>Continuous integration</strong> for integration</li></ul><h2 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h2><h3 id="Smoke-Test"><a href="#Smoke-Test" class="headerlink" title="Smoke Test"></a>Smoke Test</h3><p>Ensure that the system still runs after making a change.</p><p>A quick set of tests run on the daily build.</p><ul><li>cover most important functionalities of the software.</li><li>expose integration problems earlier.</li></ul><h3 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h3><p>Ensure that a module is not broken after making a change.</p><h3 id="Regression-Test"><a href="#Regression-Test" class="headerlink" title="Regression Test"></a>Regression Test</h3><p>Ensure that existing code doesn’t get worse as making other improvements.</p><h3 id="Fault-vs-Failure-vs-Errors"><a href="#Fault-vs-Failure-vs-Errors" class="headerlink" title="Fault vs. Failure vs. Errors"></a>Fault vs. Failure vs. Errors</h3><ul><li><strong>Fault:</strong> bug in the program</li><li><strong>Error</strong>: difference between computed value and true value.<ul><li>Discrepancy between a computed, observed or measured value or condition and the true, specified, or theoretically correct value or condition.</li></ul></li><li><strong>failure</strong>: program behaves unexpectedly.<ul><li>Termination of the ability of an element or an item to perform a function as required.</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MyClass myClass<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeEachTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        myClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span> <span class="token keyword">void</span> <span class="token function">afterEachTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        myClass <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        actual <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Test-Driven-Development-TDD"><a href="#Test-Driven-Development-TDD" class="headerlink" title="Test Driven Development (TDD)"></a>Test Driven Development (TDD)</h3><p><img src="images\tdd.png" alt></p><h3 id="Code-Coverage"><a href="#Code-Coverage" class="headerlink" title="Code Coverage"></a>Code Coverage</h3><ul><li>A form of <strong>dynamic analysis</strong></li><li><strong>White box</strong> testing</li></ul><p><strong>Criteria:</strong> To measure what percentage of code has been exercised by a test suite.</p><ul><li>Class coverage</li><li>Method coverage</li><li>Branch coverage</li><li>Statement coverage</li><li>Instruction coverage</li></ul><p>Coverage tool:</p><ul><li>JaCoCo (Java Code Coverage)</li></ul><p>Code Coverage <strong>cannot ensure test quality</strong>.</p><h3 id="Mutation-Testing"><a href="#Mutation-Testing" class="headerlink" title="Mutation Testing"></a>Mutation Testing</h3><p>tool: PIT</p><h3 id="JUnit-Generation-Tool"><a href="#JUnit-Generation-Tool" class="headerlink" title="JUnit Generation Tool"></a>JUnit Generation Tool</h3><ul><li>Randoop</li><li>Evosuite</li></ul><h2 id="衡量标准"><a href="#衡量标准" class="headerlink" title="衡量标准"></a>衡量标准</h2><p>Technical Metrics:</p><ul><li><p>Code Size</p><ul><li>lines of code (assambly &gt; c &gt; java &gt; python)</li><li>number of classes, functions, files, etc.</li><li>function points</li></ul></li><li><p>Code Complexity</p><ul><li><strong>dependencies / coupling / cohesion</strong></li><li>depth of nesting</li><li><strong>cyclomatic complexity = number of branches ( if , while , for ) + 1</strong></li><li>function points</li></ul></li></ul><p><strong>Coupling</strong></p><ul><li><p>Dhama’s metric: </p><ul><li>number of input / output parameters</li></ul><ul><li>number of global variables used</li><li>number of modules called / calling</li></ul></li><li><p>Martin’s metric:</p><ul><li>Ca: Afferent coupling: the number of classes <strong>outside</strong> this module that <strong>depend on</strong> classes <strong>inside</strong> this module</li><li>Ce: Efferent coupling: the number of classes <strong>inside</strong> this module that <strong>depend on</strong> classes <strong>outside</strong> this module</li><li>Instability: I = Ce / (Ca + Ce)</li></ul></li></ul><p><strong>Abstractness</strong> = (number of abstract classes in module / number of classes in module)</p><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><p>Reverse Engineering Patterns (Read all code in 1 hour):</p><ul><li>Intent: <strong>Assess</strong> a software system via a brief but intensive <strong>code review</strong></li><li>Problem: System is large and varied, unfamiliar</li><li>Solution: Read code and document findings (important entities and tests, “code smell”)</li><li>Looks for:<ul><li><strong>Coding style, tests</strong></li><li><strong>Abstract classes or classes hign in hierachy</strong></li><li><strong>Large entities, comments</strong></li></ul></li></ul><p>Activities:</p><ul><li><strong>Read documentation</strong><ul><li>requirements</li><li>architecture overview</li><li>design of components</li><li>interface descriptions</li><li>user manuals</li><li>code comments</li></ul></li><li><strong>Talk to people</strong></li><li><strong>Read code</strong></li><li><strong>Work with the system</strong></li><li><strong>Write documentation</strong></li></ul><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>Dynamic analysis:</p><ul><li>Testing</li><li>Code coverage</li></ul><p>Static analysis:</p><ul><li>Checkstyle<ul><li>whitespace and indentation</li><li>variable names</li><li>Javadoc commenting</li><li>code complexity</li><li>proper usage</li></ul></li><li>PMD<ul><li>Possible bugs</li><li>Dead code</li><li>Suboptimal code</li><li>Overcomplicated expressions</li><li>Duplicate code</li></ul></li><li>FindBugs<ul><li>Correctness</li><li>Bad practice</li><li>Performance</li><li>Multithreaded correctness</li><li>Dodgy</li></ul></li></ul><p>Making sure that no warning produced by Static Analysis is a form of defensive programming</p><h2 id="防御性编程"><a href="#防御性编程" class="headerlink" title="防御性编程"></a>防御性编程</h2><p><strong>Defensive programming</strong> is a form of <a href="https://en.wikipedia.org/wiki/Defensive_design" target="_blank" rel="noopener">defensive design</a> intended to ensure the continuing function of a piece of <a href="https://en.wikipedia.org/wiki/Software" target="_blank" rel="noopener">software</a> under unforeseen circumstances. Defensive programming practices are often used where high availability, safety or security is needed.</p><h2 id="用户交互设计"><a href="#用户交互设计" class="headerlink" title="用户交互设计"></a>用户交互设计</h2><ul><li>Make Everything the User Needs Readily Accessible</li><li>Be Consistent</li><li>Be Clear</li><li>Give Feedback</li><li>Use Recognition, Not Recall</li><li>Choose What People Will Interact First</li><li>Follow Design Standards</li><li>Elemental Hierarchy Matters</li><li>Keep Things Simple</li><li>Keep Your Users Free &amp; In Control</li></ul><p>Mobile UI design challenges:</p><ul><li>Small screens</li><li>Fat fingers</li><li>Poor text entry</li></ul><p>Simplify:</p><ul><li>Follow design patterns</li><li>Use touch gestures where possible</li></ul><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><p><strong>Javadoc</strong></p><ul><li><p><strong>class and interface</strong></p><ul><li>@author</li><li>@version</li></ul></li><li><p><strong>method</strong></p><ul><li>@param</li><li>@return</li><li>@exception</li></ul></li><li><p>The first sentence should summarize the purpose of the element</p></li><li>For methods, omit the subject and write in the third person narrative form</li><li>Use the word “<strong>this</strong>“ rather than “the” when referring to instances of the current class</li><li>Do not add parentheses to a method or constructor name unless you want to specify a particular signature</li><li>Keep comments up to date</li></ul><p>Bugs and missing features</p><ul><li>TODO: describes a feature that should be added</li><li>FIXME: describes a bug in the method</li><li>XXX: this needs to be thought about some more</li></ul><p>Inconsistency</p><ul><li>correct code, incorrect comment</li><li>fault in code, correct comment</li></ul><h2 id="开发运营和持续集成"><a href="#开发运营和持续集成" class="headerlink" title="开发运营和持续集成"></a>开发运营和持续集成</h2><p><strong>DevOps</strong> = Development + Optimization</p><p><strong>Continuous Integration</strong> is a software development practice where members of a team integrate their work frequently</p><ul><li>Maintain a code repository version control</li><li>Automate the build</li><li>Make your build self testing</li><li>Everyone commits to mainline every day</li><li>Every commit should build mainline on an integration machine</li><li>Keep the build fast</li><li>Test in a clone of the production environment</li><li>Make it easy for anyone to get the latest executable</li><li>Everyone can see what’s happening</li><li>Automate deployment</li></ul><h2 id="软件安全"><a href="#软件安全" class="headerlink" title="软件安全"></a>软件安全</h2><p>Techniques:</p><ul><li>Barriers</li><li>Authentication and Authorization</li><li>Encryption</li></ul><p>Security for a Mentcare system</p><ul><li><strong>Asset:</strong> The records of each patient that is receiving or has receviced treatment.</li><li><p><strong>Exposure</strong>: Potential financial loss from future patient who do not seek treatment because not trusting the clinic to maintain data.</p></li><li><p><strong>Vulnerability</strong>: Week </p></li><li><strong>Attack</strong>: </li><li><strong>Threat</strong></li><li><strong>Control</strong>: </li></ul>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> 理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基本概念</title>
      <link href="/2019/03/22/network/"/>
      <url>/2019/03/22/network/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络基本概念"><a href="#计算机网络基本概念" class="headerlink" title="计算机网络基本概念"></a>计算机网络基本概念</h1><p>在面试的时候计网的问题实属经典，后台开发必考。本文总结一下常考的基本概念。</p><h2 id="开放式系统互联七层模型-OSI-RM-layers"><a href="#开放式系统互联七层模型-OSI-RM-layers" class="headerlink" title="开放式系统互联七层模型 (OSI/RM layers)"></a>开放式系统互联七层模型 (OSI/RM layers)</h2><h3 id="应用层-Application"><a href="#应用层-Application" class="headerlink" title="应用层 (Application)"></a>应用层 (Application)</h3><p>设置与另一应用软件之间的通信</p><ul><li>HTTP, FTP, SMTP, TELNET…</li></ul><p>HTTP：无状态，无连接</p><h4 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h4><p>每次请求都要<strong>重新建立</strong>TCP连接</p><h4 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h4><ul><li>连接可以<strong>复用</strong>，持续数秒，减少三次握手次数提高效率</li><li>在request消息头增加<strong>Host</strong>域，http/1.0没有这个域</li><li>增加了put，delete，connect，trace的request方法</li></ul><h4 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP/2.0"></a>HTTP/2.0</h4><ul><li>HTTPS</li><li>采用<strong>二进制格式</strong>二不是文本格式，将传输的信息分为更小的消息和帧</li><li>完全的<strong>多路复用</strong>，单一HTTP2连接发起多重的请求响应消息</li><li>可以让服务器<strong>主动将响应推送到客户端缓存</strong>中</li></ul><h3 id="表示层-Presentation"><a href="#表示层-Presentation" class="headerlink" title="表示层 (Presentation)"></a>表示层 (Presentation)</h3><p>把数据转换为能与接收者的系统格式兼容并适合传输的格式。处理不同编码，使系统发送的数据被另一个系统的应用层所识别。</p><h3 id="会话层-Session"><a href="#会话层-Session" class="headerlink" title="会话层 (Session)"></a>会话层 (Session)</h3><p>负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接。</p><h3 id="传输层-Transport"><a href="#传输层-Transport" class="headerlink" title="传输层 (Transport)"></a>传输层 (Transport)</h3><p>底层协议的传输方式</p><h4 id="传输控制协议-TCP"><a href="#传输控制协议-TCP" class="headerlink" title="传输控制协议 (TCP)"></a>传输控制协议 (TCP)</h4><ul><li>面向连接</li><li>可靠</li><li>基于字节流</li></ul><h5 id="拥塞控制-Congestion-control"><a href="#拥塞控制-Congestion-control" class="headerlink" title="拥塞控制 (Congestion control)"></a>拥塞控制 (Congestion control)</h5><h5 id="滑动窗口-Sliding-Window"><a href="#滑动窗口-Sliding-Window" class="headerlink" title="滑动窗口 (Sliding Window)"></a>滑动窗口 (Sliding Window)</h5><ul><li>每字节都有序列号 (sequence number)</li><li>累计确认 (cumulative ACK)</li></ul><h6 id="发送端"><a href="#发送端" class="headerlink" title="发送端"></a>发送端</h6><ul><li>LastByte<strong>Acked</strong> &lt;= LastByte<strong>Sent</strong> &lt;= LastByte<strong>Written</strong></li><li>在LastByte<strong>Acked</strong>和Lastbyte<strong>Written</strong>之间的字节必须被缓冲</li></ul><h6 id="接收端"><a href="#接收端" class="headerlink" title="接收端"></a>接收端</h6><ul><li>LastByte<strong>Read</strong> &lt; NextByte<strong>Expected</strong></li><li>NextByte<strong>Expected</strong> &lt;= LastByte<strong>Rcvd</strong> + 1</li><li>在LastByte<strong>Read</strong>和Lastbyte<strong>Rcvd</strong>之间的字节必须被缓冲</li></ul><h5 id="流控制"><a href="#流控制" class="headerlink" title="流控制"></a>流控制</h5><p>接收端广播窗口 (Advertised Window)</p><h6 id="发送端-1"><a href="#发送端-1" class="headerlink" title="发送端"></a>发送端</h6><ul><li>LastByte<strong>Sent</strong> - LastByte<strong>Acked</strong> &lt;= <strong>Advertised</strong>Window</li><li><strong>Effective</strong>Window = <strong>Advertised</strong>Window - (LastByte<strong>Sent</strong> - LastByte<strong>Acked</strong>)</li><li>LastByte<strong>Written</strong> - LastByte<strong>Acked</strong> &lt;= Max<strong>Send</strong>Buffer</li><li>Block sender if (LastByteWritten - LastByteAcked) + y &gt; MaxSendBuffer</li></ul><h6 id="接收端-1"><a href="#接收端-1" class="headerlink" title="接收端"></a>接收端</h6><ul><li>LastByteRcvd - NextBytteRead &lt;= MaxRcvBuffer</li><li>AdvertisedWindow = MaxRcvBuffer - (LastByteRcvd - NextByteRead)</li></ul><h5 id="适应性重传"><a href="#适应性重传" class="headerlink" title="适应性重传"></a>适应性重传</h5><h4 id="用户数据报协议-UDP"><a href="#用户数据报协议-UDP" class="headerlink" title="用户数据报协议 (UDP)"></a>用户数据报协议 (UDP)</h4><ul><li>面向数据报</li><li>不可靠性。UDP 本身不提供确认、序列号、超时重传等机制，不保留数据备份。UDP 数据报可能在网络中被复制，被重新排序。即 UDP 不保证数据报会到达其最终目的地，也不保证各个数据报的先后顺序，也不保证每个数据报只到达一次</li><li>UDP 数据报是有长度的。每个 UDP 数据报都有长度，如果一个数据报正确地到达目的地，那么该数据报的长度将随数据一起传递给接收方。而 TCP 是一个字节流协议，没有任何（协议上的）记录边界。</li><li>UDP 是无连接的。UDP 客户和服务器之前不必存在长期的关系。UDP 发送数据报之前也不需要经过握手创建连接的过程。</li><li>UDP 支持多播和广播。</li><li>应用: DNS, SNMP, DHCP, RIP</li></ul><h3 id="网络层-Network"><a href="#网络层-Network" class="headerlink" title="网络层 (Network)"></a>网络层 (Network)</h3><ul><li>互联网协议 (IP)</li></ul><p>规划整个网络的IP地址</p><h3 id="数据链路层-Data-Link"><a href="#数据链路层-Data-Link" class="headerlink" title="数据链路层 (Data-Link)"></a>数据链路层 (Data-Link)</h3><ul><li>逻辑链路控制 (logical link control，<strong>LLC</strong>)</li><li>介质访问控制 (media access control，<strong>MAC</strong>)</li></ul><h3 id="物理层-Physical"><a href="#物理层-Physical" class="headerlink" title="物理层 (Physical)"></a>物理层 (Physical)</h3><p>局域网上传送数据帧 (data frame)，它负责管理计算机通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机接口卡等。</p><p>数据链路层+物理层：把bit流信息转化成电流信息，以及在物理设备和电流设备之间做信息的转换。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++的一些常用代码示例</title>
      <link href="/2019/03/08/cpp/"/>
      <url>/2019/03/08/cpp/</url>
      
        <content type="html"><![CDATA[<h1 id="C-的一些常用代码示例"><a href="#C-的一些常用代码示例" class="headerlink" title="C++的一些常用代码示例"></a>C++的一些常用代码示例</h1><p>本文记录了一些C++的常用代码</p><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><p>Standard Template Library</p><h3 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h3><ul><li><a href="#vector">vector</a></li><li>list</li><li>queue</li><li>deque</li><li>stack</li><li>set</li><li>pair</li><li>map</li><li>unordered_map</li><li>unordered_set</li><li>bitset</li></ul><h3 id="Algorithms-algorithm"><a href="#Algorithms-algorithm" class="headerlink" title="Algorithms (algorithm)"></a>Algorithms (algorithm)</h3><ul><li>min / max</li><li><a href="#sort">sort</a> / stable_sort / partial_sort</li><li>lower_bound / upper_bound</li><li>replace / remove / reverse</li><li>find_if / count / search</li><li>make_heap / push_heap</li></ul><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  </span><span class="token comment" spellcheck="true">// sort</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  </span><span class="token comment" spellcheck="true">// greater</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> LEN<span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> LEN<span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// or begin(arr), end(arr)</span><span class="token punctuation">}</span></code></pre><h4 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// init n by m matrix with 0</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">arr1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr1<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// insert 3 at front</span>    vec<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// inserts 4 two times at front</span><span class="token punctuation">}</span></code></pre><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>C++类的常用函数</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// String.h</span><span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">String</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">String</span> <span class="token punctuation">(</span>String<span class="token operator">&amp;</span> another<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>String <span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">char</span><span class="token operator">*</span> data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// String.cpp</span>String<span class="token operator">::</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">unsigned</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">)</span> n<span class="token operator">++</span><span class="token punctuation">;</span>        length <span class="token operator">=</span> n<span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>String<span class="token operator">::</span><span class="token function">String</span><span class="token punctuation">(</span>String <span class="token operator">&amp;</span>another<span class="token punctuation">)</span><span class="token punctuation">{</span>    length <span class="token operator">=</span> another<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> another<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>String<span class="token operator">::</span><span class="token operator">~</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span>String<span class="token operator">::</span><span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>String <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    length <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码的一些细节</title>
      <link href="/2019/03/08/java/"/>
      <url>/2019/03/08/java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java代码的一些细节"><a href="#Java代码的一些细节" class="headerlink" title="Java代码的一些细节"></a>Java代码的一些细节</h1><h2 id="for的执行顺序"><a href="#for的执行顺序" class="headerlink" title="for的执行顺序"></a>for的执行顺序</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>A<span class="token punctuation">;</span> B<span class="token punctuation">;</span> C<span class="token punctuation">)</span> <span class="token punctuation">{</span>    D<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// A B D C B D C B... (end with B if there is an end)</span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>Java 的 Exceptions 和 Errors 等类的继承关系  </p><p><img src="images/exception.jpg" alt="Exception and Errors"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种常用算法</title>
      <link href="/2019/03/08/algorithms/"/>
      <url>/2019/03/08/algorithms/</url>
      
        <content type="html"><![CDATA[<h1 id="几种常用算法"><a href="#几种常用算法" class="headerlink" title="几种常用算法"></a>几种常用算法</h1><h2 id="Binary-Serach"><a href="#Binary-Serach" class="headerlink" title="Binary Serach"></a>Binary Serach</h2><p>while小于等于<br>先判断左右，否则返回中</p><h2 id="Combinational-Number"><a href="#Combinational-Number" class="headerlink" title="Combinational Number"></a>Combinational Number</h2><p>C(n,m) = C(n-1,m-1) + C(n-1,m)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 生成组合数表</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">>></span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">>></span> <span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h2><h3 id="Selection-sort"><a href="#Selection-sort" class="headerlink" title="Selection sort"></a>Selection sort</h3><ul><li>时间复杂度O(n^2)，不要使用</li></ul><h3 id="Bubble-sort"><a href="#Bubble-sort" class="headerlink" title="Bubble sort"></a>Bubble sort</h3><ul><li>比插排慢，不要使用</li></ul><h3 id="Insertion-sort"><a href="#Insertion-sort" class="headerlink" title="Insertion sort"></a>Insertion sort</h3><ul><li>越接近结果，速度越快  </li><li>只适合小范围的排序  </li><li>时间复杂度O(n^2)  </li><li>空间复杂度O(1)</li><li>稳定</li></ul><h3 id="Heap-sort"><a href="#Heap-sort" class="headerlink" title="Heap sort"></a>Heap sort</h3><ul><li>适合内存小的环境，中小范围排序  </li><li>时间复杂度O(nlogn)  </li><li>空间复杂度O(1)  </li><li>不稳定</li></ul><h3 id="Quick-sort"><a href="#Quick-sort" class="headerlink" title="Quick sort"></a>Quick sort</h3><ul><li>比O(nlogn)要快，被用于java原始类型数组排序和C的qsort</li><li>最坏情况O(n^2)  </li><li>空间复杂度O(logn)</li><li>不稳定</li></ul><h3 id="Merge-sort"><a href="#Merge-sort" class="headerlink" title="Merge sort"></a>Merge sort</h3><ul><li>适用于数据被除主内存以外的地方获取</li><li>时间复杂度O(nlogn)</li><li>有很好的变种(Tim sort)</li><li>空间复杂度O(n)</li><li>比较难实现</li><li>稳定</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的基本概念和算法</title>
      <link href="/2019/03/08/tree/"/>
      <url>/2019/03/08/tree/</url>
      
        <content type="html"><![CDATA[<h1 id="树的基本概念和算法"><a href="#树的基本概念和算法" class="headerlink" title="树的基本概念和算法"></a>树的基本概念和算法</h1><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>自平衡二叉<strong>搜索</strong>树（Self-balancing binary search tree）又被称为<strong>AVL树</strong>（有别于AVL算法）</p><ul><li>它是一棵空树或它的左右两个子树的高度差的绝对值不超过1</li><li>左右两个子树都是一棵平衡二叉树</li><li>平衡二叉树的常用实现方法有<a href="#红黑树">红黑树</a>、AVL、替罪羊树、Treap、伸展树等</li><li>最小二叉平衡树的节点总数的公式如下 F(n)=F(n-1)+F(n-2)+1（Fibonacci数列），1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。</li><li>h = O(logn)</li></ul><h3 id="AVL树旋转"><a href="#AVL树旋转" class="headerlink" title="AVL树旋转"></a>AVL树旋转</h3><pre><code>     y                               x    / \     Right Rotation          /  \   x   T3   - - - - - - - &gt;        T1   y  / \       &lt; - - - - - - -            / \ T1  T2     Left Rotation            T2  T3         z                                      y        / \                                   /   \       y   T4      Right Rotate (z)          x      z      / \          - - - - - - - - -&gt;      /  \    /  \     x   T3                               T1  T2  T3  T4    / \  T1   T2     z                               z                           x    / \                            /   \                        /  \   y   T4  Left Rotate (y)        x    T4  Right Rotate(z)    y      z  / \      - - - - - - - - -&gt;    /  \      - - - - - - - -&gt;  / \    / \T1   x                          y    T3                    T1  T2 T3  T4    / \                        / \  T2   T3                    T1   T2  z                                y /  \                            /   \T1   y     Left Rotate(z)       z      x    /  \   - - - - - - - -&gt;    / \    / \   T2   x                     T1  T2 T3  T4       / \     T3  T4   z                            z                            x  / \                          / \                          /  \T1   y   Right Rotate (y)    T1   x      Left Rotate(z)   z      y    / \  - - - - - - - - -&gt;     /  \   - - - - - - - -&gt;  / \    / \   x   T4                      T2   y                  T1  T2  T3  T4  / \                              /  \T2   T3                           T3   T4</code></pre><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>插在叶节点，根据情况旋转（最多一次）。</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>目标节点无子节点，直接删。有一个子节点，删除后子节点顶替。有两个子节点，删除后用右子节点的最左叶节点顶替。最后根据情况旋转（可能两次）。</p><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><ul><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点必须有<strong>两个</strong>黑色的子节点。</li><li>从任一节点到其每个叶子的所有简单路径都包含<strong>相同数目</strong>的黑色节点。</li></ul><h4 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h4><p>在插入和删除上比AVL树快，但AVL树更适用于搜索。</p><h4 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insert_case</span><span class="token punctuation">(</span>node <span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>parent <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 根节点</span>        n<span class="token operator">-></span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>parent<span class="token operator">-></span>color <span class="token operator">==</span> BLACK<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 父节点为黑</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">uncle</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token function">uncle</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>color <span class="token operator">==</span> RED<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 叔父节点为红</span>        n<span class="token operator">-></span>parent<span class="token operator">-></span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>        <span class="token function">uncle</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>        <span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token function">insert_case</span><span class="token punctuation">(</span><span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 父节点为红或叔父节点为黑</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> n<span class="token operator">-></span>parent<span class="token operator">-></span>right <span class="token operator">&amp;&amp;</span> n<span class="token operator">-></span>parent <span class="token operator">==</span> <span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前为右节点且父节点为左节点</span>            <span class="token function">rotate_left</span><span class="token punctuation">(</span>n<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> n<span class="token operator">-></span>parent<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> n<span class="token operator">-></span>parent <span class="token operator">==</span> <span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前为左节点且父节点为右节点</span>            <span class="token function">rotate_right</span><span class="token punctuation">(</span>n<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        n<span class="token operator">-></span>parent<span class="token operator">-></span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>        <span class="token function">grandparent</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> n<span class="token operator">-></span>parent<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> n<span class="token operator">-></span>parent <span class="token operator">==</span> <span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前节点和父节点都为左节点</span>            <span class="token function">rotate_right</span><span class="token punctuation">(</span><span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当前节点和父节点都为右节点</span>            <span class="token function">rotate_left</span><span class="token punctuation">(</span><span class="token function">grandparent</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><ul><li>若设二叉树的深度为h，1到h-1层的结点数都是满的，第h层所有的结点都连续集中在最左边。</li><li>度为1的节点数为0或1</li><li>叶子节点数为n/2或(n+1)/2</li><li>转化为森林的个数为h或h-1</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash shell的一些常用技巧</title>
      <link href="/2019/03/07/bash-shell/"/>
      <url>/2019/03/07/bash-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Bash-shell的一些常用技巧"><a href="#Bash-shell的一些常用技巧" class="headerlink" title="Bash shell的一些常用技巧"></a>Bash shell的一些常用技巧</h1><p>最近在学操作系统，对linux也开始逐渐混熟了。踩坑无数，多少次重装系统，码农不易，我们学生也很艰辛啊。先推荐一下操作系统的圣经《Operating System Concept》这本书，官网给的ppt很不错，讲的很细很精炼 <del>（感觉比自己老师的ppt好得多）</del>。</p><p>第一次作业写的是遍历文件夹及子目录内的所有文件并且将output写入到输出文件内。看似简单，实则不然，需要注意很多特殊问题，这里就总结一下学到的东西吧。</p><h2 id="Array-数组与队列"><a href="#Array-数组与队列" class="headerlink" title="Array 数组与队列"></a><strong>Array 数组与队列</strong></h2><p>我们作业的要求是横向遍历当前文件夹，所以肯定是用到BFS，最方便的方法就是队列queue了。bash没有直接的方法调用队列，但是数组其实就可以实现所有的数据结构，只不过复杂度不同。</p><h3 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># create indexed array</span><span class="token keyword">declare</span> -a array  <span class="token comment" spellcheck="true"># or</span>array<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># create associative array</span><span class="token keyword">declare</span> -A array_ass</code></pre><p>这里关联数组其实就是hash table，可以用字符串作为下标，键值唯一。</p><h3 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h3><pre class=" language-bash"><code class="language-bash">array<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"element"</span>array_ass<span class="token punctuation">[</span>keystring<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"value"</span></code></pre><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># the size of array</span>size<span class="token operator">=</span><span class="token variable">${#array[@]}</span><span class="token comment" spellcheck="true"># traverse</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"<span class="token variable">${array[@]}</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">echo</span> element: <span class="token variable">$i</span><span class="token keyword">done</span><span class="token comment" spellcheck="true"># or</span><span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token string">"<span class="token variable">${!array[@]}</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">echo</span> element: <span class="token string">"<span class="token variable">${array[i]}</span>"</span><span class="token keyword">done</span></code></pre><h3 id="数组增减"><a href="#数组增减" class="headerlink" title="数组增减"></a>数组增减</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># append</span>array+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>array_ass+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span>foo<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># delete</span>unset array<span class="token punctuation">[</span>0<span class="token punctuation">]</span>unset array_ass<span class="token punctuation">[</span>keystring<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># or</span>array<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">${array[@]/hello}</span>"</span><span class="token punctuation">)</span>array_ass<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">${array_ass[@]/bar}</span>"</span><span class="token punctuation">)</span></code></pre><p>使用反斜杠“\”的话算是特殊用法了，如果知道了索引和键值还是用unset吧。  </p><h3 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a><strong>字符串数组</strong></h3><pre class=" language-bash"><code class="language-bash">string<span class="token operator">=</span><span class="token string">"hello world"</span>arr1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span>arr2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$string</span>"</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token variable">${arr1[0]}</span> <span class="token variable">${arr2[0]}</span><span class="token comment" spellcheck="true"># hello hello world</span></code></pre><p>相信只要是写过shell的都明白这个坑了。</p><h3 id="队列实现"><a href="#队列实现" class="headerlink" title="队列实现"></a>队列实现</h3><p>实现queue的话很简单，append已经有了，无非就是pop要写一下。</p><pre class=" language-bash"><code class="language-bash">queue<span class="token operator">=</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>first<span class="token operator">=</span><span class="token variable">${queue[0]}</span>  <span class="token comment" spellcheck="true"># peek</span>queue<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">${queue[@]:1}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#pop</span></code></pre><h2 id="Redirection-重定向"><a href="#Redirection-重定向" class="headerlink" title="Redirection 重定向"></a>Redirection 重定向</h2><p>对输入输出进行重定向的话也有一些tricks可以学习。</p><h3 id="根据路径创建文件"><a href="#根据路径创建文件" class="headerlink" title="根据路径创建文件"></a>根据路径创建文件</h3><p>这是作业里的一个大坑之一，需要根据路径将output内容写到输出文件里面。要注意要先创建附目录、参数是否是绝对路径和路径里的空格。</p><pre class=" language-bash"><code class="language-bash">output<span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span><span class="token comment" spellcheck="true"># get output parent directory path</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$output</span>"</span> <span class="token operator">=</span> <span class="token string">"/*"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    tmp<span class="token operator">=</span><span class="token variable">${output// /\\ }</span><span class="token keyword">else</span>    tmp<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/<span class="token variable">${output// /\\ }</span>    output<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/<span class="token variable">$output</span>"</span>  <span class="token comment" spellcheck="true"># ensure it is the absolute path</span><span class="token keyword">fi</span>output_dir<span class="token operator">=</span><span class="token string">"`dirname "</span><span class="token variable">$tmp</span><span class="token string">"`"</span><span class="token comment" spellcheck="true"># create parent directories</span><span class="token function">mkdir</span> -p <span class="token string">"<span class="token variable">${output_dir//\\ / }</span>"</span>  <span class="token comment" spellcheck="true"># create or clear file</span><span class="token operator">></span> <span class="token string">"<span class="token variable">$output</span>"</span>  <span class="token comment" spellcheck="true"># no input here</span></code></pre><p>这里想说的其实就是初始化文件只需要一个 &gt; 就够了</p><h3 id="使用mapfile和process-substitution存储结果"><a href="#使用mapfile和process-substitution存储结果" class="headerlink" title="使用mapfile和process substitution存储结果"></a>使用mapfile和process substitution存储结果</h3><p>mapfile是bash的内部命令，读取标准输入到索引数组。<br>process substitution 进程替换，返回一个文件描述符号，可以像一个文件名一样被使用。<br>组合使用的话就不需要管道 “|”，而且可以完美的保留多个命令所输出的字符串，不用担心空格影响数组。</p><pre class=" language-bash"><code class="language-bash">mapfile -t output_arr <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>echo <span class="token string">"hello world"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"[hello world]"</span><span class="token punctuation">)</span></code></pre><p>当然也可以这样直接加引号：</p><pre class=" language-bash"><code class="language-bash">output_arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"$(echo "</span>hello world<span class="token string">")"</span> <span class="token string">"$(echo "</span><span class="token punctuation">[</span>hello world<span class="token punctuation">]</span><span class="token string">")"</span><span class="token punctuation">)</span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h2><p>这篇文章主要是讲技巧，至于其他的注意事项这里只简要提一下吧。</p><ul><li>字符串变量一定要加引号</li><li>有些地方一定要空格，比如expr，[ 条件 ]；有些一定不要空格，比如=赋值，&lt;( 命令 )</li><li>方法局部变量记得加个local</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
